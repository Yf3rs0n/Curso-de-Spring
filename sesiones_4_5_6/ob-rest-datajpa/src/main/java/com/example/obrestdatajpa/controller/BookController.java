package com.example.obrestdatajpa.controller;import com.example.obrestdatajpa.entities.Book;import com.example.obrestdatajpa.repository.BookRepository;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.HttpHeaders;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Optional;@RestControllerpublic class BookController {    private final Logger log = LoggerFactory.getLogger(BookController.class);    //atrubutos    private BookRepository bookRepository;    //constructor    public BookController(BookRepository bookRepository) {        this.bookRepository = bookRepository;    }    //CRUD    /**     * Busca en BD (ArrayList libros)     * http://localhost:80/api/books     * @return     */    @GetMapping("/api/books")    public List<Book> findAll(){        //Recuperar y Devolver los libros de la BD        return bookRepository.findAll();    }    /**     * Buscar por ID     * http://localhost:80/api/books/1     * Request - Peticion     * Response - Respuesta     * @param id     * @return     */    @GetMapping("/api/books/{id}")//Buscador    public ResponseEntity<Book> findOneById(@PathVariable Long id){//Para que funcione\        Optional <Book> bookOpt = bookRepository.findById(id);        //opcion 1        if (bookOpt.isPresent())//Si existe el libro o no            return ResponseEntity.ok(bookOpt.get());        else            return ResponseEntity.notFound().build();        //opcion 2        //return bookOpt.orElse(null);        //return bookOpt.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());    }    /**     * Crear un nuevo libro en base de datos     * Metodo Post, no coliciona con findAll porque son diferentes metodos Http: Get vs Post     * @param book     * @param headers     * @return     */    //Crear - Guardar    @PostMapping("/api/books")    public ResponseEntity<Book> create(@RequestBody Book book, @RequestHeader HttpHeaders headers){        System.out.println(headers.get("User-Agent"));//Leer las cabeceras        //Guardar el libro recibido por parametro en la base de datos        if(book.getId() != null){//quiere decir que existe el ID y por lo tanto no es una creacion            log.warn("trying to create book with id");            System.out.println("trying to create book with id");            return ResponseEntity.badRequest().build();        }        Book result = bookRepository.save(book);        return ResponseEntity.ok(result);// se genera el libro devuelto tiene una clave primaria    }    /**     * Actializar     */    @PutMapping("/api/books")    public ResponseEntity<Book> update(@RequestBody Book book){        //si no se ejecutan estas dos condiciones entonces se guarda la actilizacion        if (book.getId() == null){//si no tiene id quiere decir que si es una creacion            log.warn("Trying to update a non existent book");            return ResponseEntity.badRequest().build();        }        if (!bookRepository.existsById(book.getId())){//!negacion            log.warn("Trying to update a non existent book");            return ResponseEntity.notFound().build();        }        //El proceso de actualizacion        Book result = bookRepository.save(book);        return ResponseEntity.ok(result);// se genera el libro devuelto tiene una clave primaria    }    //Borrar    @DeleteMapping("/api/books/{id}")    public ResponseEntity<Book> delete(@PathVariable Long id){        if (!bookRepository.existsById(id)){//!negacion            log.warn("Trying to delete a non existent book");            return ResponseEntity.notFound().build();        }        bookRepository.deleteById(id);        return ResponseEntity.noContent().build();    }    @DeleteMapping("/api/books")    public ResponseEntity<Book> deleteAll(){        log.info("REST Request for delete all books");        bookRepository.deleteAll();        return ResponseEntity.noContent().build();    }}